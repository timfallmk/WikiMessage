//
//  MessagesViewController.swift
//  WikiMessage MessagesExtension
//
//  Created by Tim Fall on 12/13/17.
//  Copyright Â© 2017 Tim Fall. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UITableViewDataSource, UITableViewDelegate {
	
    // MARK: Properties
    @IBOutlet weak var appSplashLabel: UILabel!
	@IBOutlet var tableView: UITableView!
    
	// MARK: Storage variables
	let searchController = UISearchController(searchResultsController: nil)
	var displayArray = Array(repeating: "s", count: 3)
	
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
		
		// Mark: Setup search controller
		searchController.searchResultsUpdater = self
		searchController.obscuresBackgroundDuringPresentation = false
		searchController.searchBar.placeholder = "Search Wikipedia"
		searchController.searchBar.searchBarStyle = UISearchBarStyle.minimal
		navigationItem.searchController = searchController
		// Have to do this the pre-iOS 11.0 way if there's no navigation item
		tableView.tableHeaderView = searchController.searchBar
		searchController.searchBar.delegate = self
		definesPresentationContext = true
		debugPrint(displayArray, searchController)
		
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
		tableView.reloadData()
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
	
	
	// MARK: Table View
	func numberOfSections(in tableView: UITableView) -> Int {
		return 1
	}
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return displayArray.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)
		
		cell.textLabel?.text = displayArray[indexPath.row]
		debugPrint(cell)
		return cell
	}
	
	// MARK: Actions
	func searchBarIsEmpty() -> Bool {
		// Returns true if the text is empty or nil
		return searchController.searchBar.text?.isEmpty ?? true
	}
	
	func displayText(_ searchText: String) {
		debugPrint(searchBarIsEmpty())
		if searchBarIsEmpty() {
			displayArray[0] = "Nothing to see here"
		} else {
			displayArray.append(searchText)
		}
		debugPrint(displayArray)
		tableView.reloadData()
	}
	
	// MARK: Article Manipulation
}

extension MessagesViewController: UISearchResultsUpdating {
	// MARK: UISearchResultsUpdating
	func updateSearchResults(for searchController: UISearchController) {
		displayText(searchController.searchBar.text!)
	}
}

extension MessagesViewController: UISearchBarDelegate {
	// MARK: UISearchBarDelegate
	func searchBarShouldEndEditing(_ searchBar: UISearchBar) -> Bool {
		searchBar.resignFirstResponder()
		return true
	}
	
	func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
	}
	
	func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
	}
}
